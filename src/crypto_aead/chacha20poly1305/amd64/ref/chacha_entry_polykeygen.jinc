inline fn __chacha_xor_ref_1(reg u64 output input len nonce key)
{
  stack u64 s_output s_input s_len;
  stack u32[16] st;
  reg u32[16] k;  // the full state is in k[0..14] and k15;
  stack u32 k15;
  reg u32 counter;

  s_output = output;
  s_input = input;
  s_len = len;
  
  counter = 1;
  st = __init_ref(nonce, counter, key);

  while {len = s_len;} (len >= 64)
  { k, k15 = __copy_state_ref(st);
    k, k15 = __rounds_inline_ref(k, k15);
    s_output, s_input, s_len = __sum_states_store_xor_ref(s_output, s_input, s_len, k, k15, st);
    st = __increment_counter_ref(st);
  }

  if(len > 0)
  { k, k15 = __copy_state_ref(st);
    k, k15 = __rounds_inline_ref(k, k15);
    k, k15 = __sum_states_ref(k, k15, st);
    __store_xor_last_ref(s_output, s_input, s_len, k, k15);
  }
}


inline fn __poly1305_key_gen(stack u64[4] out, reg u64 nonce key) -> stack u64[4]
{
  stack u32[16] st;
  reg u32[16] k;  // the full state is in k[0..14] and k15;
  stack u32 k15;
  inline int i;
  reg u32 counter;

  counter = 0;
  st = __init_ref(nonce, counter, key);

  k, k15 = __copy_state_ref(st);
  k, k15 = __rounds_inline_ref(k, k15);
  k, k15 = __sum_states_ref(k, k15, st);

  for i = 0 to 8 {
    out[u32 i] = k[i];
  }
  return out;
  
}

from Jade require "crypto_onetimeauth/poly1305/amd64/ref/poly1305.jinc"
from Jade require "crypto_verify/16/amd64/common/crypto_verify_16.jinc"

from Jade require "crypto_onetimeauth/poly1305/amd64/avx2/poly1305.jinc"
from Jade require "crypto_aead/chacha20poly1305/amd64/ref/poly1305_incremental.jinc"

inline fn __poly1305_ad_r_avx2(reg u64 ad adlen in inlen, stack u64[4] k) -> reg u64[2]
{
  reg u64[2] h2;
  reg u64[3] h r;
  stack u256[5] r4444   r1234;
  stack u256[4] r4444x5 r1234x5;

  stack u64 inlen_s adlen_s;

  h, r, k = __poly1305_setup_ref_stack(k);

  adlen_s = adlen;
  inlen_s = inlen;

  // We assume ad is always smaller than 256 bytes
  // so we always use ref for it

  h = __poly1305_update_noclamp_ref(ad, adlen, h, r);

  if(inlen >= 256)
  { 
    r4444, r4444x5, r1234, r1234x5 = __poly1305_avx2_setup(r);
    in, inlen, h = __poly1305_avx2_update(in, inlen, r4444, r4444x5, r1234, r1234x5);
  }

  inlen = inlen_s;
  h = __poly1305_update_noclamp_ref(in, inlen, h, r);
  adlen = adlen_s;
  inlen = inlen_s;
  h2 = __poly1305_last_lengths_ref(adlen, inlen, k, h, r);

  return h2;

}

inline fn __poly1305_ad_avx2(reg u64 tag ad adlen in inlen, stack u64[4] k)
{
  reg u64[2] h2;
  stack u64 tag_s;
  tag_s = tag;
  h2 = __poly1305_ad_r_ref(ad,adlen,in,inlen,k);
  tag = tag_s;
  __store2(tag,h2);
}

inline fn __poly1305_ad_verify_avx2(reg u64 tag ad adlen in inlen, stack u64[4] k) -> reg u64
{
  reg u64[2] tagn;
  reg u64 r;
  stack u64 tag_s;

  tag_s = tag;
  tagn = __poly1305_ad_r_avx2(ad,adlen,in,inlen,k);
  tag = tag_s;
  r = __crypto_verify_p_u8x16_r_u64x2(tag, tagn);
  return r;
}


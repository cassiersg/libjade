#!/usr/bin/env bash

# amd64 armv7m riscv (...)
arch=$1
name=libjade-dist-src-$arch

# future work: calling convention
#cconv=$2

top=$(cd "$(dirname "$0")/../../../" ; pwd -P)
src=$top/src
test=$top/test
dist=$top/$name
jade=$dist/libjade
examples=$dist/examples

# ---------------------------------------------------------
# create distribution directory
rm -fr $dist
mkdir -p $jade

# ---------------------------------------------------------
# copy license
cp $top/LICENSE $dist/LICENSE

# ---------------------------------------------------------
# copy assembly, header, and preprocessed files;
find $src -name "*.s" | sort | \
while read asm
do
  dir=$(dirname $asm)

  # check if it is a partial implementation (only provides part of the expected API)
  dasm_suffix=""
  if [ -f $dir/.partial ]; then
    dasm_suffix=".p"
  fi

  # assembly
  dasm=$(echo $dir | sed  -e 's/\(.*\)\//\1_/' -e 's/\(.*\)\//\1_/').s
  dasm=${dasm/$src/$jade}

  # destination directory
  ddir=$(dirname $dasm)
  mkdir -p $ddir
  cp $asm ${dasm}${dasm_suffix}

  # header
  sapi=$dir/include/api.h
  dapi=${dasm%.*}.h
  cp $sapi $dapi

  # if jpp is available
  if [ -x "$(command -v jpp)" ]
  then
    # preprocessed
    jazz=${asm%.*}.jazz
    djazz=${dasm%.*}.jazz
    jpp -in $jazz -out $djazz -I Jade:$src

    # makefile for the preprocessed file (we also need to get the flags configuration)
    make -C $dir .jflags 1> /dev/null

    jflags=$(cat $dir/.jflags)
    makefile=$ddir/Makefile

    if ! [ -f $makefile ]; then
      echo    "JASMIN ?= jasminc" > $makefile
      echo -e "override JFLAGS += -nowarning\n" >> $makefile
      echo -e "default: all\n" >> $makefile

    fi

    echo "$(basename $dasm): $(basename $djazz)" >> $makefile
    echo -e "\t\$(JASMIN) $jflags \$(JFLAGS) $< -o \$@\n" >> $makefile
  fi
done

# add all and clean rule to libjade/*/Makefile
while read makefile
do
  mkdir=$(dirname $makefile)
  target_list=$(find $mkdir -maxdepth 1 -name "*.s" | while read file; do echo $(basename $file); done | sort | xargs);
cat <<END >> $makefile
ALL := $target_list

all: \$(ALL)

.PHONY: clean
clean:
	rm -f \$(ALL)
END
done < <(find $jade -name "Makefile")

# ---------------------------------------------------------
# copy README.md
cp -r $top/doc/release/README.md $dist/


# -------------------------------------------------------------------
# copy example code:
# - first, copy functest.c files : test/crypto_hash/functest.c -> examples/common/jade_hash.c
# -        and remove the #include "api.h"
mkdir -p $examples/common
find $test/crypto_* -name "functest.c" | \
while read sfile
do
  dfile=$(dirname $sfile)
  dfile=${dfile/$test/$examples\/common}.c
  bdfile=$(basename $dfile)
  dfile=$(dirname $dfile)/${bdfile/crypto_/jade_}
  cp $sfile $dfile
  sed -i 's/#include "api.h"//' $dfile
done

# -------------------------------------------------------------------
# - second, copy test/include/{jade_*, namespace}.h and test/common/print.h -> examples/include/*
mkdir -p $examples/include
cp $test/include/jade_*.h $examples/include/
cp $test/include/namespace.h $examples/include/
cp $test/common/print.h $examples/include/


# - third, copy test/common/print.c -> examples/common/print.c
cp $test/common/print.c $examples/common/

# -------------------------------------------------------------------
# - fourth, setup examples and Makefile rules

while read cop
do
  jop=${cop/$jade\//}
  jop=${jop/crypto_/jade_}

  while read sdir
  do
    target_list=""

    ddir=${sdir/$jade/$examples}
    mkdir -p $ddir

    relative=$(realpath --relative-to=$ddir $dist)
    makefile=$ddir/Makefile

    while read asm
    do
      base=${asm/$jade\//}
      base=${base%.*}

      cfile=$examples/$base.c
      echo "#include \"$base.h\"" > $cfile
      echo "#include \"$jop.c\"" >> $cfile

      if ! [ -f $makefile ]
then
cp $top/doc/release/examples/Makefile $makefile
cat <<END >> $makefile

INCLUDE := -I$relative/examples/include -I$relative/examples/common -I$relative/libjade/ -I$relative/ext/randombytes/
DEPENDENCIES := $relative/ext/randombytes/randombytes.o $relative/examples/common/print.c

default: all

$relative/ext/randombytes/randombytes.o: $relative/ext/randombytes/randombytes.c
	make -C $relative/ext/randombytes/

# --------------------------------------------------------------------

END
fi

      target=${base//\//_}
      target=${target/crypto_/jade_}
      target_list="$target_list $target"
      namespace_lc=$(tr '-' '_' <<< $target)
      namespace=${namespace_lc/$jop/}
      namespace=$(tr 'a-z' 'A-Z' <<< $jop)$namespace

cat <<END >> $makefile
$target: $(basename $cfile) $relative/libjade/$base.s \$(DEPENDENCIES)
	\$(CC) \$(CFLAGS) \$(INCLUDE) -DJADE_NAMESPACE=$namespace -DJADE_NAMESPACE_LC=$namespace_lc -o \$@ \$^

END

    done < <(find $sdir -maxdepth 1 -name "*.s")

cat <<END >> $makefile
ALL := $target_list

.PHONY: \$(ALL)

all: \$(ALL)

run: all
	for example in \$(ALL); do ./\$\$example > \$\$example.out || exit \$\$?; done

.PHONY: clean

clean:
	rm -f \$(ALL)
	rm -f *.out
END

  done < <(find $cop -name "*.s" -printf "%h\n" | sort -u)
done < <(find $jade -maxdepth 1 -type d -name "crypto_*")

# ---------------------------------------------------------
# partial implementations were not considered in the examples'
# Makefiles because of the additional suffix .p; we need to
# move them into .s

while read file
do
  mv $file ${file/.p/}
done < <(find $jade -name "*.s.p")

# ---------------------------------------------------------
# copy randombytes (make sure it is clean first)
make -C $top/ext/randombytes/ clean 1> /dev/null
mkdir -p $dist/ext/
cp -r $top/ext/randombytes $dist/ext/randombytes

# rm hidden files, compress, and delete dist directory
find $dist -type f -name ".*" -exec rm {} \;
(cd $top/ && tar -zcvf $name.tar.gz $name/)
rm -fr $dist

